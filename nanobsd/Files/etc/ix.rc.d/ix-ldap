#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-ldap
# REQUIRE: root
# BEFORE: NETWORK

. /etc/rc.freenas
    
: ${NSS_LDAP_CONF:="/usr/local/etc/nss_ldap.conf"}
: ${NSS_LDAP_SECRET:="/usr/local/etc/nss_ldap.secret"}
: ${LDAP_CONF:="/usr/local/etc/openldap/ldap.conf"}
: ${CERT_FILE:="/usr/local/etc/certs/cacert.crt"}

save_certificate()
{
	local ldap_id="${1}"

	mkdir -p "$(dirname ${CERT_FILE})"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ldap_tls_cacertfile

	FROM
		services_ldap

	WHERE
		id = ${ldap_id}

	" > "${CERT_FILE}"
}

generate_ldapconf()
{
	local IFS=\|
	local nssconf="${NSS_LDAP_CONF}"
	local ldapconf="${LDAP_CONF}"
	local secret="${NSS_LDAP_SECRET}"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		services_ldap.id as ldap_id,
		ldap_hostname, 	 
		ldap_basedn, 	 
		ldap_anonbind, 	 
		ldap_rootbasedn, 	 
		ldap_rootbindpw, 	 
		ldap_pwencryption, 	 
		ldap_usersuffix, 	 
		ldap_groupsuffix, 	 
		ldap_passwordsuffix, 	 
		ldap_machinesuffix, 	 
		ldap_ssl,
		trim(
			rtrim(
				replace(
					replace(
						replace(ldap_options, '\n', '|'),
					x'0A', '|'),
				x'0D', ''),
			'|')
		) as ldap_options

	FROM
		services_ldap

	ORDER BY
		-services_ldap.id

	LIMIT 1
	" | \
	while eval read ldap_id ldap_hostname ldap_basedn ldap_anonbind ldap_rootbasedn \
		ldap_rootbindpw ldap_pwencryption ldap_usersuffix ldap_groupsuffix \
		ldap_passwordsuffix ldap_machinesuffix ldap_ssl ldap_options;
	do
		[ -z "${ldap_hostname}" -o -z "${ldap_basedn}" ] && return 1

		cat >"${nssconf}" <<-EOF
		host ${ldap_hostname}
		base ${ldap_basedn}
		rootbinddn ${ldap_rootbasedn}
		pam_password ${ldap_pwencryption}
		nss_override_attribute_value loginShell /bin/sh
EOF
		if [ -z "${ldap_usersuffix}" ]; then
			cat >>"${nssconf}" <<-EOF
			nss_base_passwd ${ldap_basedn}
EOF
		else
			cat >>"${nssconf}" <<-EOF
			nss_base_passwd ${ldap_usersuffix},${ldap_basedn}
EOF
		fi
		if [ -z "${ldap_groupsuffix}" ]; then
			cat >>"${nssconf}" <<-EOF
			nss_base_group ${ldap_basedn}
EOF
		else
			cat >>"${nssconf}" <<-EOF
			nss_base_group ${ldap_groupsuffix},${ldap_basedn}
EOF
		fi
	
		if [ "${ldap_ssl}" = "start_tls" ]; then
			save_certificate "${ldap_id}"

			cat >>"${nssconf}" <<-EOF
			ssl ${ldap_ssl}
			tls_cacertfile ${CERT_FILE}
EOF
		elif [ "${ldap_ssl}" = "on" ]; then
			save_certificate "${ldap_id}"

			cat >>"${nssconf}" <<-EOF
			uri ldaps://${ldap_hostname}
			ssl ${ldap_ssl}
			tls_cacertfile ${CERT_FILE}
EOF
		fi

		for opt in ${ldap_options}; do
			echo ${opt} >> "${nssconf}"
		done

		if [ "$ldap_anonbind" != 1 ]; then
			echo "${ldap_rootbindpw}" > "${secret}"
			chmod 600 "${secret}"
		fi

		ln -sf ${nssconf} "$(dirname ${nssconf})/ldap.conf"
		if [ "$ldap_anonbind" != 1 ]; then
			ln -sf ${secret} "$(dirname ${secret})/ldap.secret"
		fi

		echo "HOST ${ldap_hostname}" > "${ldapconf}"
		echo "BASE ${ldap_basedn}" >> "${ldapconf}"
		case "$ldap_ssl" in
		start_tls)
			cat >> "${ldapconf}" <<-EOF
			TLS_CACERT ${CERT_FILE}
			TLS_REQCERT allow
EOF
			;;
		on)
			cat >> "${ldapconf}" <<-EOF
			URI ldaps://${ldap_hostname}
			TLS_CACERT ${CERT_FILE}
			TLS_REQCERT allow
EOF
			;;
		esac
	done

	return 0
}


get_cifs_homedir()
{
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_srv_homedir

	FROM
		services_cifs

	ORDER BY
		-services_cifs.id

	LIMIT 1;
	"
}

setup_homedirs()
{
	local cifs_home="$(get_cifs_homedir)"

	if [ -n "${cifs_home}" ]
	then
		ln -sfh "$cifs_home" "/var/home" 2>/dev/null

	elif [ ! -d "/var/home" ]
	then
		mkdir /var/home
	fi
}

ldap_status()
{
	local IFS=\|
	local ret=0
	local fail="/tmp/.ldap_fail"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ldap_anonbind, 	 
		ldap_rootbasedn, 	 
		ldap_rootbindpw, 	 
		ldap_ssl
	FROM
		services_ldap

	ORDER BY
		-services_ldap.id

	LIMIT 1
	" | \
	while eval read ldap_anonbind ldap_rootbasedn ldap_rootbindpw ldap_ssl
	do
		local res=1
		local ldapsearch=/usr/local/bin/ldapsearch
		local options=

		if [ "${ldap_ssl}" = "start_tls" ]
		then
			options="-Z"
		fi

		if [ "${ldap_anonbind}" = "0" ]
		then
			local temp=$(mktemp /tmp/tmp.XXXXXX)
			local cmdfile=$(mktemp /tmp/tmp.XXXXXX)
			local cmd
		
			chmod 400 "${temp}"
			echo -n "${ldap_rootbindpw}" > "${temp}"

			echo "${ldapsearch} ${options} -D "'${ldap_rootbasedn}'" -y "${temp}"" > "${cmdfile}"
			cmd=$(cat ${cmdfile})
			eval "${cmd}" >/dev/null 2>&1
			res=$?

			rm -f "${temp}" "${cmdfile}"
		else		
			local cmdfile=$(mktemp /tmp/tmp.XXXXXX)
			local cmd

			echo "${ldapsearch} -D '' ${options}" > "${cmdfile}"
			cmd=$(cat ${cmdfile})
			eval "${cmd}" >/dev/null 2>&1
			res=$?

			rm -f "${cmdfile}"
		fi

		if [ "${res}" != "0" ]
		then
			touch "${fail}"
		fi
	done

	if [ -f "${fail}" ]
	then
		rm -f "${fail}"
		ret=1
	fi

	return ${ret}
}

ldap_start()
{
	if dirsrv_enabled ldap
	then
		if ! generate_ldapconf
		then
			return 1
		fi

		if ! setup_homedirs
		then
			return 2
		fi

		if ! create_cache_filesystem
		then
			return 4
		fi
	fi
}

ldap_stop()
{
	rm -f "${NSS_LDAP_SECRET}"
	rm -f /usr/local/etc/ldap.secret

	rm -f "${NSS_LDAP_CONF}"
	rm -f /usr/local/etc/ldap.conf

	cp /usr/local/etc/nss_ldap.conf.sample /usr/local/etc/nss_ldap.conf 2>/dev/null

        /usr/local/www/freenasUI/tools/cachetool.py expire
}


name="ix-ldap"
start_cmd='ldap_start'
status_cmd='ldap_status'
stop_cmd='ldap_stop'
            
load_rc_config $name
run_rc_command "$1"
