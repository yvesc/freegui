#!/bin/sh
#-
# Copyright (c) 2013 iXsystems, Inc., All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL Jordan Hubbard OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

. /etc/rc.subr

#
#	NT4 Functions
#
: ${NT4_CONFIG_PATH:="/etc/directoryservice/NT4"}
: ${NT4_CONTROL_FILE:="${NT4_CONFIG_PATH}/ctl"}
: ${NT4_NET_RPC_TIMEOUT:="10"}
: ${NT4_DNS_TIMEOUT:="10"}


__NT4_proto()
{
	local proto="${1}"
	local default="${2}"

	if [ -z "${default}" ]
	then
		default="tcp"
	fi

	if [ -z "${proto}" ]
	then
		proto="${default}"
	fi

	proto="$(echo ${proto}|tr A-Z a-z)"
	if [ "${proto}" != "tcp" -a "${proto}" != "udp" ]
	then
		proto="${default}"
	fi

	echo "${proto}"
}

__NT4_get_A_records()
{
	local host="${1}"
	
	NT4_log "__NT4_get_A_records: host=${host}"

	if [ -z "${host}" ]
	then
		return 1
	fi

	NT4_log "__NT4_get_A_records: dig -t a +short +nocomments ${host}"
	dig -t a +short +nocomments "${host}" | egrep -v '^[[:space:]]*;;' | sort -n +0 +1

	return $?
}

__NT4_get_A_host()
{
	local tmpfile="${1}"

	if [ -z "${tmpfile}" -o ! -s "${tmpfile}" ]
	then
		return 1
	fi

	exec 3<&0
	exec 0<"${tmpfile}"
	while read -r host
	do
		local dns_timeout="$(NT4_get nt4_dns_timeout)"
		
		NT4_log "__NT4_get_A_host: trying ${host}"

		ping -t "${dns_timeout}" -qo "${host}" >/dev/null 2>/dev/null
		if [ "$?" = "0" ]
		then
			exec 0<&3
			echo "${host}"

			NT4_log "__NT4_get_A_host: Okay"
			return 0
		fi

		NT4_log "__NT4_get_A_host: Fail"
	done
	exec 0<&3

	return 1
}

__NT4_get_A_record()
{
	local host="${1}"
	local proto=$(__NT4_proto "${2}" tcp)
	local res

	local tmpfile="$(mktemp -q /var/tmp/.adfooXXXXXX)"

	if [ -z "${proto}" ]
	then
		proto="tcp"
	fi

	NT4_log "__NT4_get_A_record: host=${host}"
	__NT4_get_A_records "${host}" > "${tmpfile}"

	__NT4_get_A_host "${tmpfile}"
	res=$?

	rm "${tmpfile}"
	return ${res}
}

__NT4_isip()
{
	local addr="${1}"
	local res=1

	local out="$(echo "${addr}" | cut -f4 -d'.' -s)"
	if [ -n "${out}" ]
	then
		res=0
	fi

	return ${res}
}

__NT4_tc()
{
	local timeout=$1
	shift
	local args="$*"

	local i=0
	local ret=1
	local lf="$(mktemp /tmp/tmp.XXXXXX)"

	lockf -k -s -t 0 ${lf} ${args} &
	ret=$?
	lpid=$!

	if [ "${ret}" != "0" ]
	then
		return ${ret}
	fi

	ret=2
	while [ ${i} -lt ${timeout} ]
	do
		sleep 1

		if lockf -k -s -t 0 ${lf} /usr/bin/true
		then
			rm -f ${lf}
			ret=0
			break
		fi

		: $((i += 1))
	done

	kill $! >/dev/null 2>&1
	pid="$(ps -axwww|grep "$args"|grep -v grep|awk '{ print $1 }')"
	if [ -n "${pid}" ]
	then
		kill ${pid} >/dev/null 2>&1
	fi

	pid="$(ps -axwww|grep "$args"|grep -v grep|awk '{ print $1 }')"
	if [ -n "${pid}" ]
	then
		kill -9 ${pid} >/dev/null 2>&1
	fi

	wait ${lpid}
	ret=$?

	rm -f ${lf}
	return ${ret}
}

__do_NT4_get()
{
	local prefix="${1}"
	local name="${2}"
	local var=\$$(printf "${prefix}${name}")
	local val=$(eval "echo ${var} 2>/dev/null")

	__unescape "${val}"
}

NT4_get()
{
	local vars="${*}"
	local prefix="__nt4_"

	for v in ${vars}
	do
		local var=\$$(printf "${v}")
		local val=$(eval "echo ${var} 2>/dev/null")

		if [ -n "${val}" ]
		then
			echo "${val}"
		else		
			__do_NT4_get "${prefix}" "${v}" 2>/dev/null
		fi
	done
}

__do_NT4_set()
{
	local prefix="${1}"
	local var="${2}"
	local val=$(__escape "${3}")
	local pair="${var}=${val}"

	eval "${prefix}${pair}"
}

NT4_set()
{
	local var="${1}"
	local val="${2}"
	local prefix="__nt4_"

	__do_NT4_set "${prefix}" "${var}" "${val}" 2>/dev/null
}

NT4_show_config()
{
	printf "NT4 Domain Config:\n"
	printf "+------------------------------------------+\n"
	printf "nt4_dcname:       %s\n" $(NT4_get nt4_dcname)
	printf "nt4_dchost:       %s\n" $(NT4_get nt4_dchost)
	printf "nt4_adminname:    %s\n" $(NT4_get nt4_adminname)
	printf "nt4_adminpw:      %s\n" $(NT4_get nt4_adminpw)
	printf "nt4_workgroup:    %s\n" $(NT4_get nt4_workgroup)
	printf "nt4_netbiosname:  %s\n" $(NT4_get nt4_netbiosname)
	printf "+------------------------------------------+\n"
}

NT4_join_domain()
{
	local adminname="${1}"
	local adminpw="${2}"
	local res

	: ${adminname:="$(NT4_get nt4_adminname)"}
	: ${adminpw:="$(NT4_get nt4_adminpw)"}

	NT4_log "NT4_join_domain: net rpc join -U ${adminname}"

	__NT4_tc "$(NT4_get nt4_timeout)" /usr/local/bin/net rpc join -U "${adminname}%${adminpw}"
	res=$?

	local ok="Failed"
	if [ "${res}" = "0" ]
	then
		ok="Successful"
	fi

	NT4_log "NT4_join_domain: ${ok}"
	return ${res}
}

NT4_status_domain()
{
	local adminname="${1}"
	local adminpw="${2}"
	local res

	: ${adminname:="$(NT4_get nt4_adminname)"}
	: ${adminpw:="$(NT4_get nt4_adminpw)"}

	NT4_log "NT4_status_domain: net rpc info -U ${adminname}"

	__NT4_tc "$(NT4_get nt4_timeout)" /usr/local/bin/net rpc info -U "${adminname}%${adminpw}"
	res=$?

	local ok="Not okay"
	if [ "${res}" = "0" ]
	then
		ok="Okay"
	fi

	NT4_log "NT4_status_domain: ${ok}"
	return ${res}
}

NT4_leave_domain()
{
	local adminname="${1}"
	local adminpw="${2}"
	local res

	: ${adminname:="$(NT4_get nt4_adminname)"}
	: ${adminpw:="$(NT4_get nt4_adminpw)"}

	#NT4_log "NT4_leave_domain: net rpc leave -U ${adminname}"

	#__NT4_tc "$(NT4_get nt4_timeout)" /usr/local/bin/net rpc leave -U "${adminname}%${adminpw}"
	#res=$?
	res=0

	local ok="Failed"
	if [ "${res}" = "0" ]
	then
		ok="Successful"
	fi

	NT4_log "NT4_leave_domain: ${ok}"
	return ${res}
}

NT4_log()
{
	local args="$*"

	local on="$(NT4_get nt4_verbose_logging)"
	if [ "${on}" = "1" ]
	then
		logger -t "NT4" ${args} >/dev/null 2>&1
	fi
}

NT4_load_database_values()
{
	local tmpfile="$(mktemp -q /var/tmp/.nt4foo.XXXXXX)"

	cat << __SQL__ | ${FREENAS_SQLITE_CMD} -line ${FREENAS_CONFIG} > ${tmpfile}
	SELECT
		nt4_dcname,
		nt4_netbiosname,
		nt4_workgroup,
		nt4_adminname,
		nt4_adminpw

	FROM
		services_nt4

	ORDER BY
		-id

	LIMIT 1;
__SQL__

	exec 3<&0
	exec 0<"${tmpfile}"
	while read -r line
	do
		var=$(echo ${line}|cut -f1 -d=|xargs)
		val=$(echo ${line}|cut -f2- -d=|xargs)

		NT4_set "${var}" "${val}"
	done
	exec 0<&3
	rm "${tmpfile}"
}

NT4_init()
{
	NT4_load_database_values

	NT4_set nt4_timeout "${NT4_NET_RPC_TIMEOUT}"
	NT4_set nt4_dns_timeout "${NT4_DNS_TIMEOUT}"

	local dcname="$(NT4_get nt4_dcname)"
	local dchost="${dcname}"

	if ! __NT4_isip "${dcname}"
	then
		dchost="$(__NT4_get_A_record ${dcname})"
		NT4_set nt4_dchost "${dchost}"
	else
		NT4_set nt4_dchost "${dcname}"
	fi

	return 0
}
