#!/bin/sh
#
# Script for building the nanobsd environment up. Required because of the way
# things are setup in NanoBSD today (this should be simplified).
#

# Environment variables that drive the nanobsd build and a few of the
# other build / image generation scripts.

# Are we doing a TrueNAS build?
is_truenas() {
    test "$NANO_LABEL" = "TrueNAS" -o ! -z "$TESTING_TRUENAS"
    return $?
}

# The FreeNAS source and build tree is rooted here.
: ${AVATAR_ROOT=$(pwd)}

: ${TRUENAS_COMPONENTS_ROOT=${AVATAR_ROOT}/nas_source/truenas-components}

# The website for this avatar project.
: ${AVATAR_PROJECT_SITE=http://www.freenas.org}

# The support site for this avatar project.
: ${AVATAR_SUPPORT_SITE=http://support.freenas.org}

# The architecture for the machine (amd64, i386, etc).
# NOTE: have to do things this way because nanobsd.sh sets this value
# explicitly in the script.
: ${FREENAS_ARCH=$(uname -p)}
if ! [ "${FREENAS_ARCH}" == "amd64" -o "${FREENAS_ARCH}" == "i386" ] ; then
	echo "Possible values for FREENAS_ARCH are amd64 or i386"
	exit
fi
NANO_ARCH=$FREENAS_ARCH

# Setup a humanized name for the image. Doesn't affect "os-base/*/"'s naming
# because people would get jangry (sic) having to rebuild their workspaces from
# scratch, changing NANO_ARCH would require shuffling around kernconfs, hacking
# TARGET/TARGET_MACHINE before jumping into the [base/ports] build system and
# because it's not user facing.
#
# Bottom line is that this is a cheap 'hack' to get what we want for Linux-y
# and Windows-y users.
case "$NANO_ARCH" in
amd64)
	NANO_ARCH_HUMANIZED="x64"
	;;
i386)
	NANO_ARCH_HUMANIZED="x86"
	;;
*)
	NANO_ARCH_HUMANIZED=$NANO_ARCH
	;;
esac

# The avatar component being built (os-base, etc).
: ${AVATAR_COMPONENT=os-base}

# os-base/amd64, etc. Other locations where this is set explicitly and try to
# figure out why it's done that way before changing this line / ordering..
NANO_OBJ=${AVATAR_ROOT}/${AVATAR_COMPONENT}/${NANO_ARCH}

# Where the build configuration files used by nanobsd.sh live.
NANO_CFG_BASE=$AVATAR_ROOT/nanobsd

# Where the FreeBSD ports tree lives.
NANO_PORTS="$AVATAR_ROOT/FreeBSD/ports"

# Where our private ports tree lives.
NAS_PORTS="$AVATAR_ROOT/nas_ports"

# Where the FreeBSD source tree lives.
NANO_SRC="$AVATAR_ROOT/FreeBSD/src"

# Where the nanobsd tools live.
NANO_TOOLS="$AVATAR_ROOT/build/nanobsd"

if [ -z "${SVNVERSION}" ]; then
	# This is executed sometimes as set -e; don't let it fail by no-oping
	# it.
	svnversion=$(command -v svnversion || :)
	git_cmd=$(command -v git || :)

	if [ -n "$svnversion" ] ; then
		# svn prints out errors to stdout. Bad svn! No cookie for you!
		svn=$(sh -c "echo r\$(cd ${AVATAR_ROOT} && /usr/bin/env LANG=C $svnversion)") || svn=""
	fi
	[ "${svn}" = "rUnversioned directory" ] && svn=""
	if [ -z "$svn" ]; then
		if [ -n "$git_cmd" ] ; then
			git=`$git_cmd rev-parse --verify --short HEAD 2>/dev/null`
			svn=`$git_cmd svn find-rev $git 2>/dev/null || echo ""`
			if [ -n "$svn" ] ; then
				svn="r${svn}"
				git="=${git}"
			else
				svn=`$git_cmd log | fgrep 'git-svn-id:' | head -1 | \
				    sed -n 's/^.*@\([0-9][0-9]*\).*$/\1/p'`
				if [ -n "$svn" ] ; then
					svn="r${svn}"
					git="+${git}"
				else
					git="${git}"
				fi
			fi
		fi
	fi
fi


# REVISION gets set to "" when doing tagged versions, SVNREVISION allows
# us to keep the SVN[/git] revision number for the build.
SVNREVISION=${SVNREVISION:-$(echo ${svn}${git})}

# This hack makes my skin crawl slightly.  If the VERSION string
# is set to -RELEASE go ahead and automagically unset REVISION
# We could probably extend the hack to include the RCs...

# Ideally we could check this elsewhere, like when doing
# the git checkouts, but unfortunately by the time that
# happens NANO_NAME has already been set and passed to
# nanobsd, so this is our shot.

COOKED_VERSION=$(echo ${VERSION} | awk '/RELEASE/ {print $1}')
if [ -z ${COOKED_VERSION} ]; then
        : ${REVISION=$(echo ${svn}${git})}
else
        REVISION=""
fi

if is_truenas ; then
	NANO_KERNEL="$TRUENAS_COMPONENTS_ROOT/nanobsd/TRUENAS.$NANO_ARCH"
else
	NANO_KERNEL="$NANO_CFG_BASE/FREENAS.$NANO_ARCH"
fi

# Local directories to install via buildworld and installworld respectively;
# see LOCAL_DIRS in Makefile.inc1, e.g. tools/regression/netinet6/ip6_sockets .
if is_truenas ; then
	: ${NANO_LOCAL_DIRS=share/examples/ses}
else
	: ${NANO_LOCAL_DIRS=""}
fi

add_nano_modules()
{

	NANO_MODULES="${NANO_MODULES} $*"
}

add_nano_modules cc/cc_cdg cc/cc_chd cc/cc_cubic cc/cc_hd cc/cc_htcp cc/cc_vegas
add_nano_modules cxgb cxgbe cyclic
add_nano_modules dtrace ext2fs fdescfs geom ipmi krpc
add_nano_modules libiconv libmchain lindev linprocfs linsysfs linux
add_nano_modules nfs_common nfsclient nfslock
add_nano_modules ispfw/ispfw
if [ "${NANO_ARCH}" = "amd64" ]; then
	add_nano_modules mpslsi3
fi
add_nano_modules opensolaris
add_nano_modules pf pflog smbfs tmpfs
add_nano_modules udf usb/xhci zfs

if is_truenas ; then
	add_nano_modules hwpmc ipdivert ipfw ispfw linprocfs syscons/blank
else
	add_nano_modules ctl cxgbe/t4_firmware cxgbe/t5_firmware
	add_nano_modules iscsi syscons
fi

# Feature sets to enable as part of the build.
SW_FEATURES="REPORTING"

if [ -z "$NANO_LABEL" ] ; then
	echo "build/nano_env: NANO_LABEL unset, should be 'FreeNAS'"
	exit 1
fi

if [ -z "$VERSION" ] ; then
	echo "build/nano_env: VERSION unset, should be '9.2.1-ALPHA'"
	exit 1
fi

NANO_LABEL_LOWER=`echo $NANO_LABEL | tr 'A-Z' 'a-z'`


# FreeBSD release we are using for this release
: ${FREEBSD_RELEASE_VERSION:="9.1-RELEASE"}
export FREEBSD_RELEASE_VERSION

# Image name, e.g. FreeNAS-8.1-r7609-amd64 or FreeNAS-8.0.1-RC1-i386, see
# nanobsd/freenas-common:last_orders().
NANO_NAME="$NANO_LABEL-$VERSION${REVISION:+-$REVISION}-$NANO_ARCH_HUMANIZED"
NANO_IMGNAME="$NANO_NAME"

# Export these vars to override the NanoBSD defaults.
export AVATAR_ROOT FREENAS_ARCH
export NANO_ARCH NANO_ARCH_HUMANIZED NANO_CFG_BASE NANO_IMGNAME NANO_KERNEL
export NANO_MODULES NANO_NAME NANO_OBJ NANO_SRC NANO_TOOLS REVISION
export SVNREVISION

# The following variables are for builders with local package and distfile
# mirrors. They're intentionally unset here to avoid accidental pollution from
# one's environment. Please replace these lines with valid values.

# See bsd.port.mk
# We need this to hit our local package cache.
#unset MASTER_SITE_BACKUP
#unset MASTER_SITE_OVERRIDE

# See pkg_add(1).
unset PACKAGEROOT
unset PACKAGESITE

# Can be overriden with env when calling, but use pxz by default
# if it's installed.
# Since the only valid values are pxz and xz setting env XZ=whatever
# will cause the build to fall back to using xz.
# TODO: If NANO_XZ is set to something other than pxz or xz and pxz is installed
# we may as well use pxz here.

if [ $(which pxz) ]; then
	if [ x"${NANO_XZ}" == "xpxz" -o -z ${XZ} ]; then
		NANO_XZ=pxz
	else
		NANO_XZ=xz
	fi
else
	NANO_XZ=xz
fi
export NANO_XZ

: ${DISTCACHE:="/freenas-build/freenas-distfiles"}
export DISTCACHE

#
# FTP mirror where we fetch files for jails
#
: ${FREEBSD_FTP_MIRROR:="ftp://ftp.freebsd.org"}
export FREEBSD_FTP_MIRROR

#
# Package mirror where we fetch packages for jails
#
: ${FREEBSD_PACKAGE_MIRROR:="http://pkg.cdn.pcbsd.org/freenas"}
export FREEBSD_PACKAGE_MIRROR

: ${FREEBSD_PACKAGE_MIRROR_32="http://mirror.exonetric.net/pub/pkgng/freebsd:9:x86:32/latest"}
export FREEBSD_PACKAGE_MIRROR_32

# vim: syntax=sh
